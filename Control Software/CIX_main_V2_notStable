//Armando Correa 1.9.2024
#include <genieArduinoDEV.h>
#include <genie_buffer.h>
#include "HCPCA9685.h"

/* I2C slave address for the device/module. For the HCMODU0097 the default I2C address
   is 0x40 */
#define  I2CAdd 0x40
#define RESETLINE 4 //set the reset pin to digital 4 for Genie 

/* Create an instance of the library */
HCPCA9685 HCPCA9685(I2CAdd);
Genie genie;

//Sensor pin assignments
const int WHpin = A0;
const int ECpin = A1;
const int FlowMeterPin = A2;
const int PressurePin = A3;
const int RegenPump = 5;
const int ServicePump = 6;

//global variables
float WaterHardness;
float Flow;
float EC;
float Pressure;
float bedVolume;
unsigned long currentTime;
const int OverPressure = 790; //units bits
float currentFlowRate = 0;
float CumulativeFlow = 0;
const float desiredFlowRate = 19.0; // Desired flow rate in ml per minute (adjust as needed)
int delta = 50; // delta used for waterhardness auto-stop
int OldHardness = 100;
int WaterHardnessCounter = 0;
float flow_value = 0;
float cumulativeflow = 0.0;
float previousbedvolume = 0.0;
unsigned long startTime = 0;
const unsigned long updateInterval = 15000;
unsigned long previousMillis = 0;
bool StartStopState;
int ButtonState0 = 0;
unsigned long hours = 0;
unsigned long minutes = 0;
unsigned long seconds = 0;
const int VALVE1 = 1;
const int VALVE2 = 2;
const int VALVE3 = 3;
const int VALVE4 = 4;
const int VALVE5 = 5;
const int VALVE6 = 6;
const int VALVE7 = 7;
const int VALVE8 = 8;
const int VALVE9 = 9;
const int VALVE10 = 10;     //Added below the IX column 09.27.2022
unsigned int APOS = 355;         //Valve A position
unsigned int BPOS = -50;        //Valve B position
const int ValveStagger = 1500;     //Delay between valve actuation to lessen current draw
int modeselect = 0;
int LatchSHFT = HIGH;
int LatchRNS = HIGH;
int LatchREG = HIGH;
int LatchSRV = HIGH;
int LatchPURGE = HIGH;
int LatchAUTO = HIGH;
int LatchMastPower = HIGH;

//Auto Mode indicator
bool AUTOMODETRANS = false;
bool AUTOMODESTEADY = false;

void setup()
{
  // Use a Serial Begin and serial port of your choice in your code and use the
  // genie.Begin function to send it to the Genie library (see this example below)
  // 200K Baud is good for most Arduinos. Galileo should use 115200.
  // Some Arduino variants use Serial1 for the TX/RX pins, as Serial0 is for USB.
  Serial.begin(115200);
  genie.Begin(Serial);

  // Reset the Display
  // THIS IS IMPORTANT AND CAN PREVENT OUT OF SYNC ISSUES, SLOW SPEED RESPONSE ETC
  // If NOT using a 4D Arduino Adaptor, digitalWrites must be reversed as Display Reset is Active Low, and
  // the 4D Arduino Adaptors invert this signal so must be Active High.
  pinMode(RESETLINE, OUTPUT);
  digitalWrite(RESETLINE, 1);
  delay(100);
  digitalWrite(RESETLINE, 0);

  while (!genie.Begin(Serial)); // Set up Genie to use Serial port, but also returns if the Display has responded and is online
  if (genie.IsOnline()) // When the display has responded above, do the following once its online
  {
    genie.AttachEventHandler(IXControls); // Attach the user function Event Handler for processing events
  }


  //Turns on Servo Controller
  HCPCA9685.Init(SERVO_MODE);
  HCPCA9685.Sleep(false);

  //Pin Declaration for Auto Control
  pinMode(RegenPump, OUTPUT);
  pinMode(ServicePump, OUTPUT);
}

void SteadyService()
{
  HCPCA9685.Servo(VALVE1, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, APOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 0);
  genie.WriteObject(GENIE_OBJ_LED, 2, 0);
  genie.WriteObject(GENIE_OBJ_LED, 3, 1);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void SteadyRinse()
{
  HCPCA9685.Servo(VALVE1, APOS);  //Reset to APOS
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, BPOS);
  delay(ValveStagger);
  //starts counting from when the button is pressed to begin displaying values
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 1);
  genie.WriteObject(GENIE_OBJ_LED, 2, 0);
  genie.WriteObject(GENIE_OBJ_LED, 3, 0);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);

}

void SteadyRegen()
{
  HCPCA9685.Servo(VALVE1, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, APOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 0);
  genie.WriteObject(GENIE_OBJ_LED, 2, 1);
  genie.WriteObject(GENIE_OBJ_LED, 3, 0);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void PurgeMode()
{
  HCPCA9685.Servo(VALVE1, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, BPOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 0);
  genie.WriteObject(GENIE_OBJ_LED, 2, 0);
  genie.WriteObject(GENIE_OBJ_LED, 3, 0);
  genie.WriteObject(GENIE_OBJ_LED, 4, 1);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void TransService()
{
  HCPCA9685.Servo(VALVE1, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, APOS);  //go to drain
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, APOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 0);
  genie.WriteObject(GENIE_OBJ_LED, 2, 0);
  genie.WriteObject(GENIE_OBJ_LED, 3, 1);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void TransRinse()
{
  HCPCA9685.Servo(VALVE1, APOS);  //Reset to APOS
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, BPOS);  //go to drain
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, BPOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 1);
  genie.WriteObject(GENIE_OBJ_LED, 2, 0);
  genie.WriteObject(GENIE_OBJ_LED, 3, 0);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void TransRegen()
{
  HCPCA9685.Servo(VALVE1, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, BPOS);  //go to drain
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, APOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, APOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 0);
  genie.WriteObject(GENIE_OBJ_LED, 2, 1);
  genie.WriteObject(GENIE_OBJ_LED, 3, 0);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void IXControls()
{
  genieFrame Event;
  genie.DequeueEvent(&Event);

  //Checks for events on MasterPower 4D Button Index 0
  if (genie.EventIs(&Event, GENIE_REPORT_EVENT, GENIE_OBJ_4DBUTTON, 0))
  {
    ButtonState0 = genie.GetEventData(&Event);
    if (ButtonState0 == 0) //if MasterPower Switch is off
    {
      LatchSHFT = HIGH;
      LatchRNS = HIGH;
      LatchREG = HIGH;
      LatchSRV = HIGH;
      LatchPURGE = HIGH;
      LatchAUTO = HIGH;
      LatchMastPower = HIGH;
      genie.WriteObject(GENIE_OBJ_ROTARYSW, 0x00, 0);
      genie.WriteObject(GENIE_OBJ_USER_LED, 2, 0); //turns OFF LED above MasterPower Switch
      genie.WriteObject(GENIE_OBJ_LED, 0, 0);
      genie.WriteObject(GENIE_OBJ_LED, 1, 0);
      genie.WriteObject(GENIE_OBJ_LED, 2, 0);
      genie.WriteObject(GENIE_OBJ_LED, 3, 0);
      genie.WriteObject(GENIE_OBJ_LED, 4, 0);
      genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      StartStopState = HIGH;
    }
    if (ButtonState0 == 1) //if Master Power switch is on
    {
      StartStopState = LOW;
      LatchMastPower = LOW;
      genie.WriteObject(GENIE_OBJ_ROTARYSW, 0x00, 0); //sets rotary switch to zero
      genie.WriteObject(GENIE_OBJ_USER_LED, 1, 0); //turns off LED of Stop Button
      genie.WriteObject(GENIE_OBJ_USER_LED, 2, 1); //turns on LED above MasterPower Switch
      genie.WriteObject(GENIE_OBJ_LED, 0, 1); //turns on LED next to off static text
    }
  }

  if (genie.EventIs(&Event, GENIE_REPORT_EVENT, GENIE_OBJ_4DBUTTON, 1)) //checks Slider
  {
    int ButtonState1 = genie.GetEventData(&Event);

    if (ButtonState1 == 0)
    {
      LatchSHFT = HIGH; //slider is set to steady state
    }
    else if (ButtonState1 == 1)
    {
      LatchSHFT = LOW; //slider is set to tansient
    }
  }

  if (genie.EventIs(&Event, GENIE_REPORT_EVENT, GENIE_OBJ_4DBUTTON, 2)) // checks Stop Button
  {
    genie.WriteObject(GENIE_OBJ_USER_LED, 0, 0); // turns off Start Button LED
    genie.WriteObject(GENIE_OBJ_USER_LED, 1, 1); // turns on Start Button LED
    StartStopState = HIGH;
    genie.WriteObject(GENIE_OBJ_LED, 0, 1);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
    genie.WriteObject(GENIE_OBJ_USER_LED, 0, 0); // turns off Start Button LED
    genie.WriteObject(GENIE_OBJ_USER_LED, 1, 1); // turns on Stop Button LED
  }

  if (genie.EventIs(&Event, GENIE_REPORT_EVENT, GENIE_OBJ_4DBUTTON, 3)) //Checks Start Button
  {

    genie.WriteObject(GENIE_OBJ_USER_LED, 0, 1); // turns on Start Button LED
    genie.WriteObject(GENIE_OBJ_USER_LED, 1, 0); // turns off Stop Button LED
    //Steady State-------------------------------------------------------------------------------------------------------------
    //Rinse Mode
    if (LatchSHFT == HIGH && LatchRNS == LOW)// && LatchMastPower == LOW && StartStopState == LOW)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 1);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
    SteadyRinse();
    }

    //Regen mode
    if (LatchSHFT == HIGH && LatchREG == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 1);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
    SteadyRegen();
    }

    //Service Mode
    if (LatchSHFT == HIGH && LatchSRV == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 1);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      SteadyService();
    }

    //Purge Mode
    if (LatchSHFT == HIGH && LatchPURGE == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 1);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      PurgeMode();
    }

    //Auto Mode
    if (LatchSHFT == HIGH && LatchAUTO == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
      //do somethings to determine when to switch between modes.
      startTime = millis();
      StartStopState = true;
      genie.WriteObject(GENIE_OBJ_LED, 5, 1);
      AUTOMODESTEADY = true;
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 1);
    }
    else
    {
      AUTOMODESTEADY = false;
    }


    //Transient-------------------------------------------------------------------------------------------------------------

    //Rinse Mode
    if (LatchSHFT == LOW && LatchRNS == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 1);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      TransRinse();
    }

    //Regen Mode
    if (LatchSHFT == LOW && LatchREG == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 1);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      TransRegen();
    }

    //Service Mode
    if (LatchSHFT == LOW && LatchSRV == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 1);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      TransService();
    }

    //Purge Mode
    if (LatchSHFT == LOW && LatchPURGE == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
    genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 1);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
      PurgeMode();
    }

    //Auto Mode
    if (LatchSHFT == LOW && LatchAUTO == LOW)// && LatchMastPower == LOW && StartStopState == false)
    {
          genie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 1);
      startTime = millis();
      StartStopState = true;
      genie.WriteObject(GENIE_OBJ_LED, 5, 1);
      AUTOMODETRANS = true;

    }
    else
    {
      AUTOMODETRANS = false;
    }
  }

  // ends Button Genie Queue

  if (genie.EventIs(&Event, GENIE_REPORT_EVENT, GENIE_OBJ_ROTARYSW, 0)) // if rotary is set to off
  {
    modeselect = genie.GetEventData(&Event);
    if (modeselect == 0)
    {
      LatchRNS = HIGH;
      LatchREG = HIGH;
      LatchSRV = HIGH;
      LatchPURGE = HIGH;
      LatchAUTO = HIGH;
    }
    if (modeselect == 1) // if rotary is set to Rinse
    {
      LatchRNS = LOW;
      LatchREG = HIGH;
      LatchSRV = HIGH;
      LatchPURGE = HIGH;
      LatchAUTO = HIGH;

    }
    if (modeselect == 2) // if rotary is set to Regen
    {
      LatchREG = LOW;
      LatchRNS = HIGH;
      LatchSRV = HIGH;
      LatchPURGE = HIGH;
      LatchAUTO = HIGH;
    }
    if (modeselect == 3) // if rotary is set to Service
    {
      LatchSRV = LOW;
      LatchRNS = HIGH;
      LatchREG = HIGH;
      LatchPURGE = HIGH;
      LatchAUTO = HIGH;

    }
    if (modeselect == 4) // if rotary is set to Purge
    {
      LatchPURGE = LOW;
      LatchRNS = HIGH;
      LatchREG = HIGH;
      LatchSRV = HIGH;
      LatchAUTO = HIGH;
    }
    if (modeselect == 5) // if rotary is set to Auto
    {
      LatchAUTO = LOW;
      LatchRNS = HIGH;
      LatchREG = HIGH;
      LatchSRV = HIGH;
      LatchPURGE = HIGH;
    }
  }
}
void CalculateTime()
{
  currentTime = millis(); // Get the current time
  unsigned long elapsedTime = currentTime - startTime; // Calculate elapsed time

  // Calculate hours, minutes, and seconds
  hours = elapsedTime / 3600000; // 1 hour = 3600000 milliseconds
  elapsedTime %= 3600000;
  minutes = elapsedTime / 60000; // 1 minute = 60000 milliseconds
  elapsedTime %= 60000;
  seconds = elapsedTime / 1000; // 1 second = 1000 milliseconds

}

void ReadSensors()
{
  WaterHardness = analogRead(WHpin);
  Flow = analogRead(FlowMeterPin);
  EC = analogRead(ECpin);
  Pressure = analogRead(PressurePin);
}

void updateDisplay(unsigned long hours, unsigned long minutes, unsigned long seconds, String hardnessStr, String ecStr, String BedVolumeStr, String PressureStr)
{
  genie.WriteStr(2, String(hours) + ":" + (minutes < 10 ? "0" : "") + String(minutes) + ":" + (seconds < 10 ? "0" : "" ) + String(seconds));
  genie.WriteStr(3, hardnessStr);
  genie.WriteStr(4, ecStr); //will be used for EC eventually but is used for pressure
  genie.WriteStr(5, BedVolumeStr); //will become bedvolumes 94 mL/min
  //genie.WriteStr(6, PressureStr); // Cumulative Ions Exchanged TBD
  previousMillis = currentTime;
}


void loop()
{


  genie.DoEvents(); // checks for new events from the touch screen
  //
  //  if (StartStopState == true)
  //  {
  //
  //    CalculateTime();
  //
  //    if(currentTime - previousMillis >= updateInterval)
  //    {
  //
  //    ReadSensors();
  //    updateDisplay(hours, minutes, seconds, String(WaterHardness),String(EC), String(Flow),"TBD");
  //    int NewHardness = WaterHardness;
  //    int difference = NewHardness - OldHardness;
  //
  //    if (difference >= delta)
  //    {
  //      WaterHardnessCounter = WaterHardnessCounter +1;
  //    }
  //
  //    OldHardness = NewHardness;
  //
  //    if (WaterHardnessCounter > 4)
  //    {
  //      genie.WriteObject(GENIE_OBJ_LED,10,1); // turns on and latches end of service run
  //      genie.WriteStr(6, "End of Service Run at " + String(hours) + ":" + String(minutes) + ":" + String(seconds));
  //    }
  //
  //    if (Pressure > OverPressure)
  //    {
  //      genie.WriteObject(GENIE_OBJ_LED, 9, 1); // turns on and latches over pressure switch
  //    }
  //
  //    }
  //  }
}
