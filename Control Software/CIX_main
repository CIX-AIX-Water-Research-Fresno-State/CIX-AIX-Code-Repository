//Armando Correa
//Miguel Sanchez
//Walter Mizuno
//With some contribution from Kimberly K Kardashian

//Last Edited: 9/17/23
//Code if for the 4D display tocuh screen that will control the servos as well as displaying multiple values such as
//Water hardness, Elapsed time, EC, cumulative ion exchange, and bed volumes

#include <genieArduino.h>
#include "HCPCA9685.h"

/* I2C slave address for the device/module. For the HCMODU0097 the default I2C address
   is 0x40 */
#define  I2CAdd 0x40

/* Create an instance of the library */
HCPCA9685 HCPCA9685(I2CAdd);
Genie genie;

#define RESETLINE 4 //set the reset pin to digital 4

//Global variables
float WaterHardness;
float Flow;
float EC;
float Pressure;
float bedVolume;
unsigned long currentTime;
const int OverPressure = 50; //units [psi]
float currentFlowRate = 0;
int CumulativeFlow =0; 

// Constants for PID control
const float Kp = 1.0;   // Proportional gain
const float Ki = 0.1;   // Integral gain
const float Kd = 0.01;  // Derivative gain

// Desired flow rate in ml per minute (adjust as needed)
const float desiredFlowRate = 19.0;

// Variables for PID control
float previousError = 0;
float integral = 0;




//Sensor pin assignments

const int WHpin = A0;
const int ECpin = A1;
const int FlowMeterPin = A2;
const int PressurePin = A3;
const int RegenPump = 5;
const int ServicePump = 6;



//global variables
float flow_value=0;
float cumulativeflow = 0.0;
float previousbedvolume = 0.0;
unsigned long startTime = 0;
const unsigned long updateInterval = 15000;
unsigned long previousMillis = 0;
bool StartStopState = false;
int ButtonState0 = 0;

//valve values
const int VALVE1 = 1;
const int VALVE2 = 2;
const int VALVE3 = 3;
const int VALVE4 = 4;
const int VALVE5 = 5;
const int VALVE6 = 6;
const int VALVE7 = 7;
const int VALVE8 = 8;
const int VALVE9 = 9;
const int VALVE10 = 10;     //Added below the IX column 09.27.2022

unsigned int APOS = 355;         //Valve A position
unsigned int BPOS = -50;        //Valve B position
const int ValveStagger = 1500;     //Delay between valve actuation to lessen current draw

int modeselect = 0;
int LatchSHFT = HIGH;
int LatchRNS = HIGH;
int LatchREG = HIGH;
int LatchSRV = HIGH;
int LatchPURGE = HIGH;
int LatchAUTO = HIGH;

int LatchMastPower = HIGH;

//Auto Mode indicator
bool AUTOMODETRANS = false;
bool AUTOMODESTEADY = false;

//Function Declarations

void SteadyService()
{
  
  HCPCA9685.Servo(VALVE1, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE2, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE3, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE4, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE5, BPOS);
  delay(ValveStagger);
  HCPCA9685.Servo(VALVE6, APOS);
  delay(ValveStagger);
  startTime = millis();
  StartStopState = true;
  genie.WriteObject(GENIE_OBJ_LED, 0, 0);
  genie.WriteObject(GENIE_OBJ_LED, 1, 0);
  genie.WriteObject(GENIE_OBJ_LED, 2, 0);
  genie.WriteObject(GENIE_OBJ_LED, 3, 1);
  genie.WriteObject(GENIE_OBJ_LED, 4, 0);
  genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void SteadyRinse()
{
              HCPCA9685.Servo(VALVE1, APOS);  //Reset to APOS
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE2, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE3, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE4, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE5, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE6, BPOS);
              delay(ValveStagger);
              //starts counting from when the button is pressed to begin displaying values
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 0, 0);
              genie.WriteObject(GENIE_OBJ_LED, 1, 1);
              genie.WriteObject(GENIE_OBJ_LED, 2, 0);
              genie.WriteObject(GENIE_OBJ_LED, 3, 0);
              genie.WriteObject(GENIE_OBJ_LED, 4, 0);
              genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void SteadyRegen()
{
              HCPCA9685.Servo(VALVE1, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE2, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE3, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE4, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE5, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE6, APOS);
              delay(ValveStagger);
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 0, 0);
              genie.WriteObject(GENIE_OBJ_LED, 1, 0);
              genie.WriteObject(GENIE_OBJ_LED, 2, 1);
              genie.WriteObject(GENIE_OBJ_LED, 3, 0);
              genie.WriteObject(GENIE_OBJ_LED, 4, 0);
              genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void PurgeMode()
{
                HCPCA9685.Servo(VALVE1, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE2, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE3, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE4, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE5, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE6, BPOS);
              delay(ValveStagger);
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 0, 0);
              genie.WriteObject(GENIE_OBJ_LED, 1, 0);
              genie.WriteObject(GENIE_OBJ_LED, 2, 0);
              genie.WriteObject(GENIE_OBJ_LED, 3, 0);
              genie.WriteObject(GENIE_OBJ_LED, 4, 1);
              genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void TransService()
{
HCPCA9685.Servo(VALVE1, BPOS);
delay(ValveStagger);
HCPCA9685.Servo(VALVE2, BPOS);
delay(ValveStagger);
HCPCA9685.Servo(VALVE3, BPOS);  //go to drain
delay(ValveStagger);
HCPCA9685.Servo(VALVE4, BPOS);
delay(ValveStagger);
HCPCA9685.Servo(VALVE5, BPOS);
delay(ValveStagger);
HCPCA9685.Servo(VALVE6, APOS);
delay(ValveStagger);
startTime = millis();
StartStopState = true;
genie.WriteObject(GENIE_OBJ_LED, 0, 0);
genie.WriteObject(GENIE_OBJ_LED, 1, 0);
genie.WriteObject(GENIE_OBJ_LED, 2, 0);
genie.WriteObject(GENIE_OBJ_LED, 3, 1);
genie.WriteObject(GENIE_OBJ_LED, 4, 0);
genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void TransRinse()
{
           HCPCA9685.Servo(VALVE1, BPOS);  //Reset to APOS
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE2, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE3, BPOS);  //go to drain
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE4, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE5, APOS);  
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE6, APOS);
              delay(ValveStagger);
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 0, 0);
              genie.WriteObject(GENIE_OBJ_LED, 1, 1);
              genie.WriteObject(GENIE_OBJ_LED, 2, 0);
              genie.WriteObject(GENIE_OBJ_LED, 3, 0);
              genie.WriteObject(GENIE_OBJ_LED, 4, 0);
              genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void TransRegen()
{
                HCPCA9685.Servo(VALVE1, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE2, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE3, BPOS);  //go to drain
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE4, APOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE5, BPOS);
              delay(ValveStagger);
              HCPCA9685.Servo(VALVE6, APOS);
              delay(ValveStagger);
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 0, 0);
              genie.WriteObject(GENIE_OBJ_LED, 1, 0);
              genie.WriteObject(GENIE_OBJ_LED, 2, 1);
              genie.WriteObject(GENIE_OBJ_LED, 3, 0);
              genie.WriteObject(GENIE_OBJ_LED, 4, 0);
              genie.WriteObject(GENIE_OBJ_LED, 5, 0);
}

void RegenPumpSequence() {
 
      
}

void CalculateBedVolumes(){
    float flowRate  = Flow * 0.03; //x
    float bedVolume = (flowRate / (4 * 1000) / 530.1438) + previousbedvolume;
    previousbedvolume = bedVolume;
    
}

void ReadSensors(){
  WaterHardness = analogRead(WHpin);
  Flow = analogRead(FlowMeterPin);
  EC = analogRead(ECpin);
  Pressure = analogRead(PressurePin);
}

float RegenPID(float currentFlowRate)
 {
    
    int UpperFlowLimit = 220; //units [ml/min]
    int impulseSignal = 100; // RegenPump 45 RPM
    analogWrite(RegenPump,impulseSignal);
    delay(2000);
    ReadSensors();
    float mappedFlowRate = map(Flow, 0, 1023, 0, UpperFlowLimit); //maps analog Flowmeter Signal from 0 - 1023 to 0 ml/min - 220 ml/min enables 0.215ml/min resolution


  // Calculate the error
  float error = desiredFlowRate - mappedFlowRate;

  // Compute the integral term
  integral += error;

  // Compute the derivative term
  float derivative = error - previousError;

  // Calculate the PID output
  float output = (Kp * error) + (Ki * integral) + (Kd * derivative);

  // Update previous error for the next iteration
  previousError = error;

  return output;
}  


void SteadyAutoMode()
{

}



void TransAuto(){

}




void IXControls()
{
genieFrame Event;
  if (genie.DequeueEvent(&Event)) {
    if (Event.reportObject.cmd == GENIE_REPORT_EVENT) {
      if(Event.reportObject.object == GENIE_OBJ_4DBUTTON){
        if (Event.reportObject.index == 0){
          ButtonState0 = genie.GetEventData(&Event);
          if (ButtonState0 == 0){
            LatchSHFT = HIGH;
            LatchRNS = HIGH;
            LatchREG = HIGH;
            LatchSRV = HIGH;
            LatchPURGE = HIGH;
            LatchAUTO = HIGH;
            LatchMastPower = HIGH;
            genie.WriteObject(GENIE_OBJ_ROTARYSW, 0x00, 0);
            genie.WriteObject(GENIE_OBJ_LED, 0, 0);
            genie.WriteObject(GENIE_OBJ_LED, 1, 0);
            genie.WriteObject(GENIE_OBJ_LED, 2, 0);
            genie.WriteObject(GENIE_OBJ_LED, 3, 0);
            genie.WriteObject(GENIE_OBJ_LED, 4, 0);
            genie.WriteObject(GENIE_OBJ_LED, 5, 0);
            StartStopState = false;

          }
          else if (ButtonState0 == 1){
            LatchMastPower = LOW;
            genie.WriteObject(GENIE_OBJ_ROTARYSW, 0x00, 0);
            genie.WriteObject(GENIE_OBJ_LED, 0, 1);
          }
        }

        if(Event.reportObject.index == 1){
          int ButtonState1 = genie.GetEventData(&Event);
          if (ButtonState1 == 0){
            LatchSHFT = HIGH; //slider is set to steady state
          }
          else if (ButtonState1 == 1){
            LatchSHFT = LOW; //slider is set to tansient
          }
        }
        if(Event.reportObject.index == 2){
            StartStopState = false;
            genie.WriteObject(GENIE_OBJ_LED, 0, 1);
            genie.WriteObject(GENIE_OBJ_LED, 1, 0);
            genie.WriteObject(GENIE_OBJ_LED, 2, 0);
            genie.WriteObject(GENIE_OBJ_LED, 3, 0);
            genie.WriteObject(GENIE_OBJ_LED, 4, 0);
            genie.WriteObject(GENIE_OBJ_LED, 5, 0);
        }
        if(Event.reportObject.index == 3){

            //Steady State-------------------------------------------------------------------------------------------------------------

            //Rinse Mode
            if(LatchSHFT == HIGH && LatchRNS == LOW && LatchMastPower == LOW && StartStopState == false){
            SteadyRinse();
            }
            
            //Regen mode
            if(LatchSHFT == HIGH && LatchREG == LOW && LatchMastPower == LOW && StartStopState == false){
            SteadyRegen();
            }

            //Service Mode
            if(LatchSHFT == HIGH && LatchSRV == LOW && LatchMastPower == LOW && StartStopState == false){
            SteadyService();
            }

            //Purge Mode
            if(LatchSHFT == HIGH && LatchPURGE == LOW && LatchMastPower == LOW && StartStopState == false){
            PurgeMode();
            }

            //Auto Mode
            if(LatchSHFT == HIGH && LatchAUTO == LOW && LatchMastPower == LOW && StartStopState == false){
              //do somethings to determine when to switch between modes.
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 5, 1);
              AUTOMODESTEADY = true;
            }
            else{
              AUTOMODESTEADY = false;
            }


            //Transient-------------------------------------------------------------------------------------------------------------

            //Rinse Mode
            if(LatchSHFT == LOW && LatchRNS == LOW && LatchMastPower == LOW && StartStopState == false){
              TransRinse();
            }

            //Regen Mode
            if(LatchSHFT == LOW && LatchREG == LOW && LatchMastPower == LOW && StartStopState == false){
              TransRegen();
            }

            //Service Mode
            if(LatchSHFT == LOW && LatchSRV == LOW && LatchMastPower == LOW && StartStopState == false){
              TransService();
            }

            //Purge Mode
            if(LatchSHFT == LOW && LatchPURGE == LOW && LatchMastPower == LOW && StartStopState == false){
              PurgeMode();
            }

            //Auto Mode
            if(LatchSHFT == LOW && LatchAUTO == LOW && LatchMastPower == LOW && StartStopState == false){
              startTime = millis();
              StartStopState = true;
              genie.WriteObject(GENIE_OBJ_LED, 5, 1);
              AUTOMODETRANS = true;
   
            }
            else{
              AUTOMODETRANS = false;
            }
        }
      }
      if(Event.reportObject.object == GENIE_OBJ_ROTARYSW){
       if(Event.reportObject.index == 0x00){
          if(Event.reportObject.data_lsb == 0)
            {
              if(LatchMastPower == LOW){
              genie.WriteObject(GENIE_OBJ_LED, 0,1);
              LatchRNS = HIGH;
              LatchREG = HIGH;
              LatchSRV = HIGH;
              LatchPURGE = HIGH;
              LatchAUTO = HIGH;
              }
            }
            if(Event.reportObject.data_lsb == 1) //Rinse Selector
            {
              if(LatchMastPower == LOW){
              LatchRNS = LOW;
              LatchREG = HIGH;
              LatchSRV = HIGH;
              LatchPURGE = HIGH;
              LatchAUTO = HIGH;
              }
            }
            if(Event.reportObject.data_lsb == 2) //Regen Selector
            {
              if(LatchMastPower == LOW){
              LatchREG = LOW;
              LatchRNS = HIGH;
              LatchSRV = HIGH;
              LatchPURGE = HIGH;
              LatchAUTO = HIGH;
              }
            }
            
            if(Event.reportObject.data_lsb == 3) //Service Selector
            {
              if(LatchMastPower == LOW){
              LatchSRV = LOW;
              LatchRNS = HIGH;
              LatchREG = HIGH;
              LatchPURGE = HIGH;
              LatchAUTO = HIGH;
              }
            }
            if(Event.reportObject.data_lsb == 4) //Purge Selector
            {
              if(LatchMastPower == LOW){
              LatchPURGE = LOW;
              LatchRNS = HIGH;
              LatchREG = HIGH;
              LatchSRV = HIGH;
              LatchAUTO = HIGH;
              }
            }
            if(Event.reportObject.data_lsb == 5) //Auto Selector
            {
              if(LatchMastPower == LOW){
              LatchAUTO = LOW;
              LatchRNS = HIGH;
              LatchREG = HIGH;
              LatchSRV = HIGH;
              LatchPURGE = HIGH;
              }
            }
            
        }
      }
    }
  }
}

void updateDisplay(String hardnessStr, String ecStr, String bedVolumeStr, unsigned long hours, unsigned long minutes, unsigned long seconds) 
{
genie.WriteStr(2, String(hours) + ":" + (minutes < 10 ? "0" : "") + String(minutes) + ":" + (seconds < 10 ? "0" : "" ) + String(seconds));
genie.WriteStr(3, hardnessStr);
genie.WriteStr(4, ecStr);
genie.WriteStr(5, flow_value);
genie.WriteStr(6, "SomeValue"); // 

previousMillis = currentTime;
}


void setup() {
Serial.begin(115200);
genie.Begin(Serial);

  /* Initialise the library and set it to 'servo mode' */
  HCPCA9685.Init(SERVO_MODE);

  /* Wake the device up */
  HCPCA9685.Sleep(false);

pinMode(RESETLINE, 1);
digitalWrite(RESETLINE, 1);
delay(100);
digitalWrite(RESETLINE, 0);
delay(2000);


//Pin Declaration for Auto Control
pinMode(RegenPump,OUTPUT);
pinMode(ServicePump,OUTPUT);

genie.AttachEventHandler(IXControls);

}

void loop() {

  genie.DoEvents(); // checks for new events from the touch screen

  if (StartStopState){
    currentTime = millis(); // Get the current time
    unsigned long elapsedTime = currentTime - startTime; // Calculate elapsed time
    
    // Calculate hours, minutes, and seconds
    unsigned long hours = elapsedTime / 3600000; // 1 hour = 3600000 milliseconds
    elapsedTime %= 3600000;
    unsigned long minutes = elapsedTime / 60000; // 1 minute = 60000 milliseconds
    elapsedTime %= 60000;
    unsigned long seconds = elapsedTime / 1000; // 1 second = 1000 milliseconds

    

    if(currentTime - previousMillis >= updateInterval)
    {

    ReadSensors();
    CalculateBedVolumes();
    updateDisplay(String(WaterHardness), String(EC), String(bedVolume, 4), hours, minutes, seconds);

    }

    if(AUTOMODESTEADY)
    {
    //Local Variable Declaration
    int RegenVolumeLimit = 912; //921ml
    int PumpSpeed = 203; // = 255/200*(known RPM for desired flow rate) in this case 19ml/min is desired and 130RPM is the known 
    // RPM that gives apprx 19ml/min. So, 255/200*130 = 166
    float mappedFlowRate = 0;

    SteadyRegen(); //throws valves to regen mode steady stategenie.WriteObject(GENIE_OBJ_LED, 0, 0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 1);
    genie.WriteObject(GENIE_OBJ_LED, 3, 1);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
    delay(1000); // gives valves some time to settle
    ReadSensors(); // updates current sensor values
    CalculateBedVolumes(); //Finds Bed Volumes
    updateDisplay(String(WaterHardness), String(EC), String(bedVolume, 4), hours, minutes, seconds); //Updates Display

        while(CumulativeFlow  < RegenVolumeLimit && Pressure < OverPressure )
        {   
        analogWrite(RegenPump, PumpSpeed);
        for (int ii = 1; ii = 4; ii++)
        {
            delay(15000;) //15 sec.
            ReadSensors();
            updateDisplay(String(Flow), String("Place Holder"), String(EC, 4), hours, minutes, seconds);
            
            CumulativeFlow = CumulativeFlow + Flow;
        }
        delay(15000); // 15 sec
        ReadSensors(); // read in flow value after 15 seconds
        updateDisplay(String(Flow), String(CumulativeFlow), String(EC, 4), hours, minutes, seconds); //gives flow rate value from flow
        mappedFlowRate = map(Flow, 0, 1023, 0, 250); //maps 0-1023 signal from meter to 0-250ml/min 0.244ml/min resolution
        CumulativeFlow = CumulativeFlow+mappedFlowRate; 
        genie.WriteObject(GENIE_OBJ_LED, 1, 1);
        genie.WriteObject(GENIE_OBJ_LED, 2, 1);
        genie.WriteObject(GENIE_OBJ_LED, 3, 1);
        genie.WriteObject(GENIE_OBJ_LED, 4, 1);
        genie.WriteObject(GENIE_OBJ_LED, 5, 1);

       
        }
         updateDisplay(String("shits done"), String(CumulativeFlow), String(EC, 4), hours, minutes, seconds); //Updates Display
    analogWrite(ServicePump,0);
    genie.WriteObject(GENIE_OBJ_LED, 1, 0);
    genie.WriteObject(GENIE_OBJ_LED, 2, 0);
    genie.WriteObject(GENIE_OBJ_LED, 3, 0);
    genie.WriteObject(GENIE_OBJ_LED, 4, 0);
    genie.WriteObject(GENIE_OBJ_LED, 5, 0);
  
    }
  }
}
